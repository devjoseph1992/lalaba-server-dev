rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow list, get: if request.auth.token != null && request.auth.token.role in ["admin", "employee"];
      allow get: if request.auth != null && resource.data.role == "merchant";
      allow create: if request.auth.token != null && request.auth.token.role == "admin";
      allow create: if request.auth.token != null &&
        request.auth.token.role == "employee" &&
        request.resource.data.role in ["rider", "merchant"];
      allow create: if request.auth != null && request.resource.data.role == "customer";
    }

    match /wallets/{walletId} {
      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.userId || request.auth.uid == request.resource.data.userId);
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth.token != null && request.auth.token.role == "admin";
    }

    match /orders/{orderId} {
      allow create: if request.auth.token != null && request.auth.token.role == "customer"
        && request.resource.data.merchantId is string
        && (
          (
            request.resource.data.productId is string &&
            exists(/databases/$(database)/documents/business/$(request.resource.data.merchantId)/products/$(request.resource.data.productId))
          ) ||
          (
            request.resource.data.serviceId is string &&
            exists(/databases/$(database)/documents/business/$(request.resource.data.merchantId)/services/$(request.resource.data.serviceId))
          )
        );

      allow read, update, delete: if request.auth.token != null && request.auth.token.role == "admin";

      allow read, list: if request.auth != null &&
        (request.auth.uid == resource.data.customerId ||
         request.auth.uid == resource.data.merchantId ||
         request.auth.uid == resource.data.riderId);

      allow update: if request.auth != null &&
        request.auth.token.role in ["rider", "merchant"] &&
        request.auth.uid in [resource.data.merchantId, resource.data.riderId];

      allow read: if request.auth != null &&
        request.auth.uid == resource.data.merchantId;
    }

    match /business/{userId} {
      allow get, list: if request.auth != null;

      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;

      allow create: if (
        (request.auth.uid == userId && request.auth.token.role == "merchant") ||
        (request.auth.token.role == "admin" && request.resource.data.role == "merchant")
      );

      allow delete: if request.auth.token != null && request.auth.token.role == "admin";

      match /products/{productId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null &&
          request.auth.uid == userId && request.auth.token.role == "merchant";
      }

      match /services/{serviceId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null &&
          request.auth.uid == userId && request.auth.token.role == "merchant";
      }

      match /info/{docId} {
        allow read: if request.auth != null &&
          (request.auth.uid == userId || request.auth.token.role in ["admin", "employee", "merchant"]);
        allow write: if request.auth != null &&
          request.auth.uid == userId && request.auth.token.role == "merchant";
      }

      match /categories/{categoryId} {
        allow read, write: if request.auth != null &&
          request.auth.uid == userId &&
          request.auth.token.role == "merchant";
      }
    }
  }
}
