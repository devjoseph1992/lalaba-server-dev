rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // USERS
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;

      allow list, get: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ["admin", "employee"];

      allow create: if request.auth != null &&
        (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin" ||
          (
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "employee" &&
            request.resource.data.role in ["merchant", "rider"]
          ) ||
          request.resource.data.role == "customer"
        );
    }

    // WALLETS
    match /wallets/{walletId} {
      allow read, update: if request.auth != null &&
        request.auth.uid == resource.data.userId &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ["merchant", "rider"];

      allow delete: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }

    // ORDERS
    match /orders/{orderId} {
      allow create: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "customer" &&
        request.resource.data.merchantId is string &&
        (
          (
            request.resource.data.productId is string &&
            exists(/databases/$(database)/documents/businesses/$(request.resource.data.merchantId)/products/$(request.resource.data.productId))
          ) ||
          (
            request.resource.data.serviceId is string &&
            exists(/databases/$(database)/documents/businesses/$(request.resource.data.merchantId)/services/$(request.resource.data.serviceId))
          )
        );

      allow read, update, delete: if request.auth != null &&
        (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin" ||
          request.auth.uid in [resource.data.customerId, resource.data.merchantId, resource.data.riderId]
        );
    }

    // BUSINESSES
    match /businesses/{businessId} {
      allow list: if request.auth != null;

      allow get, read: if request.auth != null;

      allow write: if request.auth != null &&
        request.auth.uid == businessId &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "merchant";

      allow create, delete: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";

      // BUSINESS DETAILS (âœ… patched)
      match /info/details {
        allow read: if request.auth != null &&
          (
            request.auth.uid == businessId ||  // Merchant can read their own
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin" // Optional: Admin read access
          );

        allow write: if request.auth != null &&
          request.auth.uid == businessId &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "merchant";
      }

      // PRODUCTS
      match /products/{productId} {
        allow read: if request.auth != null;

        allow write: if request.auth != null &&
          request.auth.uid == businessId &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "merchant";
      }

      // SERVICES
      match /services/{serviceId} {
        allow read: if request.auth != null;

        allow write: if request.auth != null &&
          request.auth.uid == businessId &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "merchant";
      }

      // CATEGORIES
      match /categories/{categoryId} {
        allow read: if request.auth != null;

        allow write: if request.auth != null &&
          request.auth.uid == businessId &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "merchant";
      }
    }
  }
}
